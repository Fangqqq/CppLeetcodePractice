https://leetcode.cn/problems/check-completeness-of-a-binary-tree/




//按宽度遍历

//如果遇到的任何一个节点，有右孩子，没左孩子，直接返回false
//在满足第一个条件的情况下，如果遇到第一个左右两个孩子不双全的情况，那么接下来遇到的所有节点都必须是叶节点，否则不是完全二叉树

class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        if(root==nullptr){
            return true;
        }
        queue<TreeNode*> q;
        q.push(root);
        bool leaf =false;
        while(!q.empty())
        {
            root=q.front();
            q.pop();
            if(
                (leaf&&( (root->left!=nullptr)|| (root->right!=nullptr)) )
            ||(root->left==nullptr && root->right!=nullptr)
            ){
                return false;
            }

            if(root->left!=nullptr ){
                q.push(root->left);
            }
            if(root->right!=nullptr ){
                q.push(root->right);
            }
            if(root->left==nullptr || root->right==nullptr){
                leaf=true;
            }
        }
        return true;
    }
};