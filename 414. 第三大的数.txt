https://leetcode.cn/problems/third-maximum-number/

方法一：排序
将数组从大到小排序后，从头开始遍历数组，通过判断相邻元素是否不同，来统计不同元素的个数。
如果能找到三个不同的元素，就返回第三大的元素，否则返回最大的元素。

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end(),greater<>());
        int num=0;
        long max=LONG_MIN;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]!=nums[i+1]){
                num++;
            }
            if(num==2){
                return nums[i+1];
            }
        }
        return nums[0];
    }
};


方法二：有序集合
遍历数组，同时用一个有序集合来维护数组中前三大的数。
每遍历一个数，就将其插入有序集合，若有序集合的大小超过 3，就删除集合中的最小元素。
可以保证有序集合的大小至多为 3，且遍历结束后，若有序集合的大小为 3，其最小值就是数组中第三大的数；若有序集合的大小不足 3，那么就返回有序集合中的最大值。


class Solution {
public:
    int thirdMax(vector<int>& nums) {
        set<int> snums;
        for(int num:nums){
            snums.insert(num);
            if(snums.size()>3){
                snums.erase(snums.begin());
            }
        }
        return snums.size()==3? *snums.begin() : *snums.rbegin();
    }
};