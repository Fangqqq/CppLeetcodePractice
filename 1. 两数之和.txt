//暴力求解

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> v{0,0};
        for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    v={i,j};
                    return v;
                }
            }
        }
        //为了编译不会出问题随便返回的，因为保证有答案
        return v;
    }
};

--------------------------------

//哈希表

// 思路及算法
// 方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此需要能够快速寻找数组中是否存在目标元素。如果存在，需要找出它的索引。
// 使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。
// 创建一个哈希表，对于每一个 x，首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hashtable;//创建哈希表

        for (int i = 0; i < nums.size(); ++i) {//只循环一次，边寻找边记录
            int find=target-nums[i];
            if (hashtable.count(find)!=0) //哈希表有记录，说明找到答案
            {
                return {i,hashtable[find]};
            }
            hashtable[nums[i]] = i;//没有找到则继续循环并且记录当前数字到哈希表
        }
        
        //为了编译不会出问题随便返回，因为保证有答案
        return {};
    }
};