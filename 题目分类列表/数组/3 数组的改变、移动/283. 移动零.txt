https://leetcode.cn/problems/move-zeroes/

方法：队列
将数组中非零的数依次尾插入队列中，再从队列头读取到数组中，数组中后部分数字改为0

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        deque<int> de;
        for(int num:nums){
            if(num!=0){
                de.push_back(num);
            }
        }
        int n=de.size();
        for(int i=0;i<nums.size();i++){
            if(i<n){
                nums[i]=*(de.begin());
                de.pop_front();
            }else{
                nums[i]=0;
            }
        }
    }
};

--------------------------
方法二：双指针
使用双指针，左指针指向当前已经处理好的序列的尾部，右指针指向待处理序列的头部。

右指针不断向右移动，每次右指针指向非零数，则将左右指针对应的数交换，同时左指针右移。

注意到以下性质：

左指针左边均为非零数；

右指针左边直到左指针处均为零。

因此每次交换，都是将左指针的零与右指针的非零数交换，且非零数的相对顺序并未改变。

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n=nums.size();
        int left=0,right=0;
        while(right<n){
            if(nums[right]){
                int temp=nums[right];
                nums[right]=nums[left];
                nums[left]=temp;
                left++;
            }
            right++;
        }
    }
};