https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/

方法一：顺序查找
最简单直接的方法即为顺序查找，假设当前链表的长度为 n，则知道链表的倒数第 k 个节点即为正数第 n−k 个节点，此时我们只需要顺序遍历到链表的第 n−k 个节点即为倒数第 k 个节点。
首先求出链表的长度 n，然后顺序遍历到链表的第n−k 个节点返回即可。
复杂度分析
时间复杂度：O(n)，其中 n 为链表的长度。需要两次遍历。
空间复杂度：O(1)。
class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        int n=0;
        ListNode* cur=head;
        while(cur!=NULL){
            n++;
            if(cur->next){
                cur=cur->next;
            }else{
                break;
            }
        }
        int num=n-k;
        while(num){
            head=head->next;
            num--;
        }
        return head;
    }
};


方法二：双指针
快慢指针的思想。将第一个指针fast 指向链表的第k+1 个节点，第二个指针slow 指向链表的第一个节点，此时指针fast 与slow 二者之间刚好间隔 k 个节点。此时两个指针同步向后走，当第一个指针 fast 走到链表的尾部空节点时，则此时 slow 指针刚好指向链表的倒数第k个节点。
首先将 fast 指向链表的头节点，然后向后走 k 步，则此时fast 指针刚好指向链表的第k+1 个节点。
首先将 slow 指向链表的头节点，同时slow 与 fast 同步向后走，当fast 指针指向链表的尾部空节点时，则此时返回 slow 所指向的节点即可。

class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast && k){
            fast=fast->next;
            k--;
        }
        while(fast!=NULL){
            fast=fast->next;
            slow=slow->next;
        }
        return slow;
    }
};
