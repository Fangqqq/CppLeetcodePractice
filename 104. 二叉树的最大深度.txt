https://leetcode.cn/problems/maximum-depth-of-binary-tree/

方法一：深度优先搜索

左子树和右子树的最大深度 l 和 r，那么该二叉树的最大深度即为max(l,r) + 1，而左子树和右子树的最大深度又可以以同样的方式进行计算。
在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，
然后在 O(1) 时间内计算出当前二叉树的最大深度。递归在访问到空节点时退出。

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==nullptr)
        {
            return 0;
        }
        int leftdepth=maxDepth(root->left);
        int rightdepth=maxDepth(root->right);

        int depth=leftdepth>rightdepth? (leftdepth+1):(rightdepth+1);
        return depth;
    }
};
---------------------------------------------

方法二：广度优先搜索

广度优先搜索的队列里存放的是「当前层的所有节点」。
每次拓展下一层的时候，不同于广度优先搜索的每次只从队列里拿出一个节点，需要将队列里的所有节点都拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是当前层的所有节点，
即一层一层地进行拓展，最后用一个变量ans 来维护拓展的次数，该二叉树的最大深度即为 ans。
class Solution {
public:
    int maxDepth(TreeNode* root) {
        queue<TreeNode*> qu;
        if(root==nullptr) return 0;
        int ans=0;//记录现在层数
        qu.push(root);//头结点入栈
        while(!qu.empty()){
            int sz=qu.size();//当前层的节点数量
            while(sz>0){//遍历完一层，出一次while
                TreeNode* cur = qu.front();
                qu.pop();
                if (cur->left) qu.push(cur->left);
                if (cur->right) qu.push(cur->right);
                sz--;
            }
            ans++;//去下一层遍历前总层数++
        }
        return ans;
    }
};
