class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end(),greater<int>());
        return nums[k-1];
    }
};

————————————————————————————————
//优先队列-小顶堆
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int num=nums.size();
        int result=nums[0];
        if(num==0||k>num){
        return 0;
        }
        priority_queue<int,vector<int>,greater<int>> q;
        for(int i=0;i<num;i++){
            q.push(nums[i]);
            if(q.size()>k)
            {
                q.pop();
            }
        }
        result=q.top();
        return result;
    }
};