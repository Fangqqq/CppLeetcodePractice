https://leetcode.cn/problems/binary-tree-inorder-traversal/

//非递归遍历——压入栈

递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其他都相同

二叉树的迭代就是使用循环的方式实现遍历；
需要寻找到最后一个左节点，并添加到结果中；（该没有左节点，所以也为根节点）
然后访问右节点。（右节点可能存在左节点和右节点，所以跟根节点的遍历一样处理）

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode*> st;
        vector<int> v;
        if(root!=nullptr)
        {
            while(!st.empty()||root!=nullptr)
            {
                if(root!=nullptr)
                {
                    st.push(root);
                    root=root->left;
                }else{
                    root=st.top();
                    st.pop();
                    v.push_back(root->val);
                    root=root->right;
                }
            }
        }
        return v;
    }
};

//递归遍历
class Solution {
public:
    vector<int> v;
    vector<int> inorderTraversal(TreeNode* root) {
        if(root==nullptr)
        return v;

        inorderTraversal(root->left);
        v.push_back(root->val);
        inorderTraversal(root->right);
        return v;
    }
};
