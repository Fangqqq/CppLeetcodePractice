方法一：哈希表
由于同一个数字在两个数组中都可能出现多次，因此需要用哈希表存储每个数字出现的次数。对于一个数字，其在交集中出现的次数等于该数字在两个数组中出现次数的最小值。

首先遍历第一个数组，并在哈希表中记录第一个数组中的每个数字以及对应出现的次数，然后遍历第二个数组，对于第二个数组中的每个数字，如果在哈希表中存在这个数字，则将该数字添加到答案，并减少哈希表中该数字出现的次数。

为了降低空间复杂度，首先遍历较短的数组并在哈希表中记录每个数字以及对应出现的次数，然后遍历较长的数组得到交集。


class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        if (nums1.size() > nums2.size()) {//先遍历较短的数组并在哈希表中记录每个数字以及对应出现的次数
            return intersect(nums2, nums1);
        }
        unordered_map <int, int> mp;
        for (int num : nums1) {
            ++mp[num];
        }
        vector<int> result;
        for(int num : nums2){
            if(mp.count(num)){
                result.push_back(num);
                --mp[num];
                if(mp[num]==0){//出现次数为0 时删除要在哈希表中的记录
                    mp.erase(num);
                }
            }
        }
        return result;
    }
};