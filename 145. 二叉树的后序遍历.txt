https://leetcode.cn/problems/binary-tree-postorder-traversal/


非递归
后序：准备一个放置栈，一个收集栈，先把根节点放入放置栈中，重复步骤：
1.从栈中弹出一个节点cur放入收集栈 2.先将左节点压入栈中，再将右节点压入，重复 3. 之后打印收集栈。


class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> st1;
        stack<TreeNode*>st2;

        if(root==nullptr)
            return v;
        st1.push(root);
        while(!st1.empty())
        {
            root=st1.top();
            st1.pop();
            st2.push(root);

            if(root->left!=nullptr) st1.push(root->left);
            if(root->right!=nullptr) st1.push(root->right);
        }
        while(!st2.empty())
        {
            root=st2.top();
            st2.pop();
            v.push_back(root->val);
        }
        return v;
    } 
};


-------------------------------------
递归做法

class Solution {
public:
    vector<int> v;
    vector<int> postorderTraversal(TreeNode* root) {
        if(root==nullptr)
        {
            return v;
        }
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        v.push_back(root->val);
        return v;
    }
};