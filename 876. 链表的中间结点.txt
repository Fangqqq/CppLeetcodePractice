https://leetcode.cn/problems/middle-of-the-linked-list/

方法：快慢指针
快指针每次走2步，慢指针每次走1步，当快指针走到末尾时慢指针正好走到中间。

如果有两个中间结点，则返回第二个中间结点。
快指针可以前进的条件是：当前快指针和当前快指针的下一个结点都非空。

如果题目要求「在两个中间结点的时候，返回第一个中间结点」
此时快指针可以前进的条件是：当前快指针的下一个结点和当前快指针的下下一个结点都非空。

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* low = head;
        ListNode* fast = head;
        //快指针每次走2步，慢指针每次走1步，当快指针走到末尾时慢指针正好走到中间。
        while(fast!=NULL && (fast->next!=NULL))
        {
            fast=fast->next->next;
            low=low->next;
        }
        return low;
    }
};