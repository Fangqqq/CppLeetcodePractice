https://leetcode.cn/problems/linked-list-cycle/



方法一：哈希表

遍历所有节点，每次遍历到一个节点时，判断该节点此前是否被访问过。

可以使用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。


class Solution {
public:
    bool hasCycle(ListNode *head) {
         unordered_set<ListNode*> seen;
         while(head!=NULL)
         {
             if(seen.count(head))
             {
                 return true;
             }
             seen.insert(head);
             head=head->next;
         }
         return false;
    }
};


-----------------------------------
方法二：快慢指针
定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。
初始时，慢指针在位置 head，而快指针在位置 head->next。
如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL ||head->next==NULL){
            return false;
        }

        ListNode * slow=head;
        ListNode * fast=head->next;


        while(slow!=fast){
            if (fast == NULL || fast->next == NULL) {
                return false;
            }
            slow = slow->next;
            fast = fast->next->next;
        }
        return true;
    }
};